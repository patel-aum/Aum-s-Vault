=== transaction-service ==
=== ./middleware/auth.js ===
import axios from 'axios';

export const auth = async (req, res, next) => {
  try {
    // Log the incoming headers to verify if Authorization is included
    console.log('Incoming request headers:', req.headers);

    const authHeader = req.header('Authorization');
    if (!authHeader) {
      console.log('Authorization header missing.');
      return res.status(401).json({ message: 'Authorization header is required' });
    }

    const token = authHeader.replace('Bearer ', '');
    console.log(`Extracted token: ${token}`);

    // Making request to auth-service for token validation
    const response = await axios.get(`${process.env.AUTH_SERVICE_URL}/validate-token`, {
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });

    console.log('Auth service response:', response.data);

    if (!response.data.isValid) {
      console.log('Token is invalid as per auth service.');
      return res.status(401).json({ message: 'Unauthorized' });
    }

    // Log the user data received from auth service
    console.log('User data from auth service:', response.data.user);
    req.user = response.data.user;
    next();
  } catch (error) {
    console.error("Authentication error:", error.message || error);

    // Log the detailed error response from axios if present
    if (error.response) {
      console.error('Error response from auth service:', error.response.data);
      res.status(error.response.status).json({ message: error.response.data.message || 'Token validation failed' });
    } else {
      res.status(500).json({ message: 'Server error during authentication' });
    }
  }
};

=== ./config/db.js ===
import pkg from 'pg';
const { Pool } = pkg;
import dotenv from 'dotenv';

dotenv.config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

export const query = async (text, params) => {
  const start = Date.now();
  const res = await pool.query(text, params);
  const duration = Date.now() - start;
  console.log('Executed query', { text, duration, rows: res.rowCount });
  return res;
};
=== ./server.js ===
import express from 'express';
import bodyParser from 'body-parser';
import transactionRoutes from './routes/transactions.js';
import cors from 'cors';

const app = express();
app.use(cors());
app.use(bodyParser.json());
app.use('/api/transactions', transactionRoutes);

const port = process.env.PORT || 5002;
app.listen(port, () => {
  console.log(`Transactions service is running on port ${port}`);
});


=== ./controllers/transactions.js ===
import { query } from '../config/db.js';

export const getTransactions = async (req, res) => {
  try {
    const result = await query(
      `SELECT 
        t.*,
        fa.account_number as from_account_number,
        ta.account_number as to_account_number,
        CASE 
          WHEN fa.user_id = $1 THEN 'debit'
          ELSE 'credit'
        END as type
       FROM transactions t
       LEFT JOIN accounts fa ON t.from_account_id = fa.id
       LEFT JOIN accounts ta ON t.to_account_id = ta.id
       WHERE fa.user_id = $1 OR ta.user_id = $1
       ORDER BY t.created_at DESC`,
      [req.user.id]
    );

    res.json(result.rows);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const deposit = async (req, res) => {
  const { accountId, amount } = req.body;

  if (amount <= 0) {
    return res.status(400).json({ message: 'Invalid amount' });
  }

  try {
    await query('BEGIN');

    // Verify account ownership
    const accountCheck = await query(
      'SELECT id FROM accounts WHERE id = $1 AND user_id = $2',
      [accountId, req.user.id]
    );

    if (accountCheck.rows.length === 0) {
      await query('ROLLBACK');
      return res.status(403).json({ message: 'Unauthorized account access' });
    }

    // Create deposit transaction
    await query(
      `INSERT INTO transactions 
       (to_account_id, amount, type, status, description)
       VALUES ($1, $2, 'debit', 'completed', 'Cash Deposit')`,
      [accountId, amount]
    );

    // Update account balance
    await query(
      'UPDATE accounts SET balance = balance + $1 WHERE id = $2',
      [amount, accountId]
    );

    await query('COMMIT');

    // Get updated account info
    const updatedAccount = await query(
      'SELECT * FROM accounts WHERE id = $1',
      [accountId]
    );

    res.json(updatedAccount.rows[0]);
  } catch (error) {
    await query('ROLLBACK');
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
};

export const transfer = async (req, res) => {
  const { fromAccountId, toAccountId, amount, description } = req.body;

  if (amount <= 0) {
    return res.status(400).json({ message: 'Invalid amount' });
  }

  try {
    await query('BEGIN');

    // Verify account ownership
    const accountCheck = await query(
      'SELECT id, balance FROM accounts WHERE id = $1 AND user_id = $2',
      [fromAccountId, req.user.id]
    );

    if (accountCheck.rows.length === 0) {
      await query('ROLLBACK');
      return res.status(403).json({ message: 'Unauthorized account access' });
    }

    // Check sufficient balance
    if (accountCheck.rows[0].balance < amount) {
      await query('ROLLBACK');
      return res.status(400).json({ message: 'Insufficient funds' });
    }

    // Create transfer transaction
    await query(
      `INSERT INTO transactions 
       (from_account_id, to_account_id, amount, type, status, description)
       VALUES ($1, $2, $3, 'debit', 'completed', $4)`,
      [fromAccountId, toAccountId, amount, description || 'Transfer']
    );

    // Update account balances
    await query(
      'UPDATE accounts SET balance = balance - $1 WHERE id = $2',
      [amount, fromAccountId]
    );
    await query(
      'UPDATE accounts SET balance = balance + $1 WHERE id = $2',
      [amount, toAccountId]
    );

    await query('COMMIT');

    // Get updated account info
    const updatedAccount = await query(
      'SELECT * FROM accounts WHERE id = $1',
      [fromAccountId]
    );

    res.json(updatedAccount.rows[0]);
  } catch (error) {
    await query('ROLLBACK');
    console.error(error);
    res.status(500).json({ message: 'Server error' });
  }
};


=== ./routes/transactions.js ===
import express from 'express';
import { auth } from '../middleware/auth.js';
import { getTransactions, deposit, transfer } from '../controllers/transactions.js';

const router = express.Router();

router.get('/', auth, getTransactions);
router.post('/deposit', auth, deposit);
router.post('/transfer', auth, transfer);

export default router;



