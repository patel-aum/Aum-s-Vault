name: Build and Push to ECR

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'backend/**'

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: 627720351262.dkr.ecr.us-east-1.amazonaws.com
  ECR_REPOSITORY_PREFIX: aumsvault

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      auth-service: ${{ steps.changes.outputs.auth-service }}
      card-service: ${{ steps.changes.outputs.card-service }}
      transaction-service: ${{ steps.changes.outputs.transaction-service }}
      user-service: ${{ steps.changes.outputs.user-service }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            auth-service:
              - 'backend/auth-service/**'
            card-service:
              - 'backend/card-service/**'
            transaction-service:
              - 'backend/transaction-service/**'
            user-service:
              - 'backend/user-service/**'

  build-and-push:
    needs: detect-changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - service: frontend
            path: frontend
            enabled: ${{ needs.detect-changes.outputs.frontend == 'true' }}
          - service: auth-service
            path: backend/auth-service
            enabled: ${{ needs.detect-changes.outputs.auth-service == 'true' }}
          - service: card-service
            path: backend/card-service
            enabled: ${{ needs.detect-changes.outputs.card-service == 'true' }}
          - service: transaction-service
            path: backend/transaction-service
            enabled: ${{ needs.detect-changes.outputs.transaction-service == 'true' }}
          - service: user-service
            path: backend/user-service
            enabled: ${{ needs.detect-changes.outputs.user-service == 'true' }}

    if: ${{ matrix.enabled }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Get previous version
        id: get-version
        run: |
          CURRENT_VERSION=$(aws ecr describe-images \
            --repository-name ${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }} \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text || echo "v0")
          CURRENT_NUMBER=$(echo $CURRENT_VERSION | sed 's/v//')
          NEXT_VERSION="v$((CURRENT_NUMBER + 1))"
          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Build and push
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          IMAGE_TAG: ${{ steps.get-version.outputs.next_version }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:$IMAGE_TAG ${{ matrix.path }}
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY_PREFIX }}/${{ matrix.service }}:$IMAGE_TAG
