# name: CI - Build and Push to ECR
# on:
#   push:
#     branches:
#       - main
#     paths-ignore:
#       - './backend/older-monolith-backend'
# jobs:
#   detect-and-build:
#     runs-on: ubuntu-latest
#     outputs:
#       should_build: ${{ steps.check_message.outputs.build }}
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3
#       - name: Setup Git
#         run: |
#           git config --global user.name "${{ github.actor }}"
#           git config --global user.email "${{ github.actor }}@users.noreply.github.com"
#       - name: Check Commit Message for "-build"
#         id: check_message
#         run: |
#           if [[ "${{ github.event.head_commit.message }}" == *"-build"* ]]; then
#             echo "build=true" >> $GITHUB_OUTPUT
#           else
#             echo "build=false" >> $GITHUB_OUTPUT
#           fi
#       - name: Skip Build if No "-build" in Commit Message
#         if: steps.check_message.outputs.build == 'false'
#         run: echo "Skipping build and deployment steps."
#   build-and-deploy:
#     needs: detect-and-build
#     if: needs.detect-and-build.outputs.should_build == 'true'
#     runs-on: ubuntu-latest
#     env:
#       AWS_REGION: us-east-1
#       ECR_REGISTRY: 627720351262.dkr.ecr.us-east-1.amazonaws.com/aumsvault
#     steps:
#       - name: Checkout Code
#         uses: actions/checkout@v3
#       - name: Setup AWS CLI
#         uses: aws-actions/configure-aws-credentials@v2
#         with:
#           aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#           aws-region: ${{ env.AWS_REGION }}
#       - name: Login to ECR
#         run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
#       - name: Get Services to Build
#         id: services
#         run: |
#           changed_dirs=$(git diff --name-only HEAD~1 HEAD | grep -E '^(backend|frontend)/' | awk -F/ '{print $1 "/" $2}' | uniq)
#           echo "services=${changed_dirs}" >> $GITHUB_OUTPUT
#       - name: Build and Push Images
#         id: build-images
#         run: |
#           for service in ${{ steps.services.outputs.services }}; do
#             base_service=$(basename $service)
#             echo "Processing $base_service..."
#             version=$(grep -oP '(?<=image: .*/'${base_service}'\:v)[0-9]+' k8s/${base_service}/deployment.yaml | head -1)
#             new_version=$((version + 1))
#             echo "Incrementing version: v$version -> v$new_version"
#             sed -i "s/:v${version}/:v${new_version}/g" k8s/${base_service}/deployment.yaml
#             docker build -t ${{ env.ECR_REGISTRY }}/${base_service}:v${new_version} $service
#             docker push ${{ env.ECR_REGISTRY }}/${base_service}:v${new_version}
#           done
#       - name: Commit Updated Deployment Files
#         run: |
#           git add k8s/**/deployment.yaml
#           git commit -m "GITHUB ACTION: Updated deployment files with new versions."
#           git push
